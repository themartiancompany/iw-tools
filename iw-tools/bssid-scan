#!/usr/bin/env bash
#
# SPDX-License-Identifier: AGPL-3.0-or-later

_bin="$( \
  dirname \
    "$( \
      command \
        -v \
	  "env")")"
_lib="${_bin}/../lib"
source \
  "${_lib}/libcrash-bash/crash-bash"

# shellcheck disable=SC2034
_global_variables() {
  target_device=""
  associated_only=""
  color=""
  quiet=""
}

_requirements() {
  local \
    _os
  _os="$( \
    uname \
      -o)"
  _check_cmd \
    'iw'
  if [[ "${_os}" == "Android" ]]; then
    _check_cmd \
      'sudo' \
      'tsu'
  fi
}

_get_conf_dir_path() {
  local \
    _dir
  _dir="${HOME}/.config/$( \
    _get \
      "app" \
      "name")"
  echo \
    "${_dir}"
}

_bssids_get() {
  local \
    _device="${1}" \
    _associated_only="${2}" \
    _iw_out
  _iw_out="$( \
    _iw_scan \
      "${_device}")"
  _iw_parse \
    "${_iw_out}" \
    "${_associated_only}"
}

_iw_parse() {
  local \
    _iw_out="${1}" \
    _associated_only="${2}" \
    _bsss=() \
    _bsss_lines
  _bsss_lines="$( \
    echo \
      "${_iw_out}" | \
      sed \
        -n \
        "/^BSS /p")"
  if [[ "${_associated_only}" == "y" ]]; then
    _bsss_lines="$( \
      echo \
        "${_bsss_lines}" | \
        grep \
          "associated")"
  fi
  _bsss=(  $( \
    echo \
      "${_bsss_lines}" | \
      awk \
        '{print $2}' | \
        awk \
          -F \
            "(" \
          '{print $1}')
  )
  echo \
    "${_bsss[*]}"
}

_iw_scan() {
  local \
    _device="${1}" \
    _cmd=()
  _cmd=(
    iw
      dev
        "${_device}"
        scan
  )
  sudo \
    "${_cmd[@]}"
}

_bssid_scan() {
  local \
    _device="${1}" \
    _associated_only="${2}" \
    _cmd=()
  _bssids_get \
    "${_device}" \
    "${_associated_only}"
}

_set_overrides() {
  _set_override \
    "target" \
    "device" \
    "wlan0"
  _set_override \
    "associated" \
    "only" \
    "n"
  if [[ -v override_quiet ]]; then
    quiet="${override_quiet}"
  elif [[ -z "${quiet}" ]]; then
    quiet="y"
  fi
  if [[ -v override_color ]]; then
    color="${override_color}"
  elif [[ -z "${color}" ]]; then
    color="n"
  fi
}

# Show help usage, with an exit status.
# $1: exit status number.
_usage() {
  local \
    _usage_text
  IFS='' \
    read \
      -r \
      -d '' \
      _usage_text << \
        ENDUSAGETEXT || true
Returns visible BSSIDs

Usage:
  $(_get "app" "name")

  options:
     -d                   Target wireless device name.
                          Default: '$(_get "target" "device")'
     -a                   Get only associated bssid.
                          Default: '$(_get "associated" "only")'

     -h                   This message.
     -c                   Enable color output
     -v                   Enable verbose output
ENDUSAGETEXT
  _printf \
    '%s\n' \
    "${_usage_text}"
  exit \
    "${1}"
}

_display_flags() {
  local \
    _flags=(
      "${1}"
    ) \
    _flag
  for _flag \
    in "${_flags[@]}"; do
  _msg_info \
    "                             ${_flag}"
  done
}

# Shows configuration options.
_show_config() {
  local \
    _call_date
  TZ=UTC \
  printf \
    -v \
      _call_date \
    '%(%FT%R%z)T' \
    "${SOURCE_DATE_EPOCH}"
  _msg_info "${app_name} configuration"
  _msg_info "                Call date:   $(_get "_call" "date")"
  _msg_info "            Target device:   $(_get "target" "device")"
  _msg_info "          Associated only:   $(_get "associated" "only")"
}

_globals
_global_variables
_requirements
_config_user_init \
  "$(_get \
       "app" \
       "name")"
# shellcheck disable=SC2034
while \
  getopts \
    'd:acvh?' \
    arg; do
  case \
    "${arg}" in
    d) override_target_device="${OPTARG}" ;;
    a) override_associated_only="y" ;;
    c) override_color="y" ;;
    v) override_quiet="n" ;;
    h|?) _set_overrides && \
         _usage \
           0 ;;
    *)
    _msg_error \
      "Invalid argument '${arg}'" \
      0
    _usage \
      1
    ;;
  esac
done
shift \
  $(( \
    OPTIND - 1 \
  ))
_set_overrides
_config_user_init \
  "$( \
    _get \
      "app" \
      "name")"
_show_config
app_opts=(
  "$( \
    _get \
      "target" \
      "device")"
  "$( \
    _get \
      "associated" \
      "only")"
)
_bssid_scan \
  "${app_opts[@]}"

# vim:set sw=2 sts=-1 et:
